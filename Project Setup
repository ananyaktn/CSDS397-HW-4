dbt init hwfour ## using duckdb
cd hwfour
cd seeds
mv "pathname" seeds/employee_data_clean.csv
dbt seed
cd models
touch employee_data.sql salary_to_department_analysis.sql salary_to_tenure_analysis.sql performance_by_salary_analysis.sql experience_by_age.sql department_by_country.sql experience_by_performance.sql
nano employee_data.sql
    WITH source_data AS (
      SELECT 
         "Employee Id" AS EmployeeID,
          Name,
          Age,
          Department,
         "Date of Joining" AS Start_Date,
         "Years of Experience" AS  Years_of_Experience,
          Country,
          Salary,
          CASE 
              WHEN "Performance Rating" = 'Low Performers' THEN 1
              WHEN "Performance Rating" = 'Average Performers' THEN 2
              WHEN "Performance Rating" = 'High Performers' THEN 3
          END AS Performance_Rating
      FROM {{ ref('employee_data_clean') }} -- Refers to the seed file
  )
  SELECT * FROM source_data

nano salary_to_department_analysis.sql
  SELECT 
      Department, 
      AVG(Salary) AS Avg_Salary
  FROM {{ ref('employee_data') }}
  GROUP BY Department

nano salary_to_tenure_analysis.sql
  SELECT 
    Years_of_Experience, 
    AVG(Salary) AS Avg_Salary
  FROM {{ ref('employee_data') }}
  GROUP BY Years_of_Experience
  ORDER BY Years_of_Experience

nano performance_by_salary_analysis.sql
  SELECT 
      Performance_Rating, 
      AVG(Salary) AS Avg_Salary
  FROM {{ ref('employee_data') }}
  GROUP BY Performance_Rating
  ORDER BY Performance_Rating

nano experience_by_age.sql
  SELECT 
      Age, 
      AVG(Years_of_Experience) AS Avg_Years_of_Experience
  FROM {{ ref('employee_data') }}
  GROUP BY Age
  ORDER BY Age

nano department_by_country.sql
  WITH ranked_departments AS (
      SELECT 
          Country, 
          Department, 
          COUNT(*) AS Employee_Count,
          RANK() OVER (PARTITION BY Country ORDER BY COUNT(*) DESC) AS rank
      FROM {{ ref('employee_data') }}
      GROUP BY Country, Department
  )
  SELECT Country, Department, Employee_Count
  FROM ranked_departments
  WHERE rank = 1

nano experience_by_performance.sql
  SELECT 
      Performance_Rating, 
      AVG(Years_of_Experience) AS Avg_Years_of_Experience
  FROM {{ ref('employee_data') }}
  GROUP BY Performance_Rating
  ORDER BY Performance_Rating

dbt run

## to view results
duckcli dev.duckdb
